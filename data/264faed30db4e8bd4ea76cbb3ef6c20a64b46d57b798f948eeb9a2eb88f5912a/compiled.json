{"execute":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ExecuteMsg","oneOf":[{"type":"object","required":["receive"],"properties":{"receive":{"$ref":"#/definitions/Cw20ReceiveMsg"}},"additionalProperties":false},{"type":"object","required":["unstake"],"properties":{"unstake":{"type":"object","required":["amount"],"properties":{"amount":{"$ref":"#/definitions/Uint128"}}}},"additionalProperties":false},{"type":"object","required":["claim"],"properties":{"claim":{"type":"object"}},"additionalProperties":false},{"type":"object","required":["update_config"],"properties":{"update_config":{"type":"object","properties":{"duration":{"anyOf":[{"$ref":"#/definitions/Duration"},{"type":"null"}]},"manager":{"type":["string","null"]},"owner":{"type":["string","null"]}}}},"additionalProperties":false},{"type":"object","required":["add_hook"],"properties":{"add_hook":{"type":"object","required":["addr"],"properties":{"addr":{"type":"string"}}}},"additionalProperties":false},{"type":"object","required":["remove_hook"],"properties":{"remove_hook":{"type":"object","required":["addr"],"properties":{"addr":{"type":"string"}}}},"additionalProperties":false}]},"query":{"$schema":"http://json-schema.org/draft-07/schema#","title":"QueryMsg","oneOf":[{"type":"object","required":["staked_balance_at_height"],"properties":{"staked_balance_at_height":{"type":"object","required":["address"],"properties":{"address":{"type":"string"},"height":{"type":["integer","null"],"format":"uint64","minimum":0}}}},"additionalProperties":false},{"type":"object","required":["total_staked_at_height"],"properties":{"total_staked_at_height":{"type":"object","properties":{"height":{"type":["integer","null"],"format":"uint64","minimum":0}}}},"additionalProperties":false},{"type":"object","required":["staked_value"],"properties":{"staked_value":{"type":"object","required":["address"],"properties":{"address":{"type":"string"}}}},"additionalProperties":false},{"type":"object","required":["total_value"],"properties":{"total_value":{"type":"object"}},"additionalProperties":false},{"type":"object","required":["get_config"],"properties":{"get_config":{"type":"object"}},"additionalProperties":false},{"type":"object","required":["claims"],"properties":{"claims":{"type":"object","required":["address"],"properties":{"address":{"type":"string"}}}},"additionalProperties":false},{"type":"object","required":["get_hooks"],"properties":{"get_hooks":{"type":"object"}},"additionalProperties":false}]},"responses":{"AllAccountsResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"AllAccountsResponse","type":"object","required":["accounts"],"properties":{"accounts":{"type":"array","items":{"type":"string"}}}},"AllAllowancesResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"AllAllowancesResponse","type":"object","required":["allowances"],"properties":{"allowances":{"type":"array","items":{"$ref":"#/definitions/AllowanceInfo"}}}},"AllowanceResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"AllowanceResponse","type":"object","required":["allowance","expires"],"properties":{"allowance":{"$ref":"#/definitions/Uint128"},"expires":{"$ref":"#/definitions/Expiration"}}},"BalanceResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"BalanceResponse","type":"object","required":["balance"],"properties":{"balance":{"$ref":"#/definitions/Uint128"}}},"ClaimsResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ClaimsResponse","type":"object","required":["claims"],"properties":{"claims":{"type":"array","items":{"$ref":"#/definitions/Claim"}}}},"GetConfigResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"GetConfigResponse","type":"object","required":["token_address"],"properties":{"manager":{"type":["string","null"]},"owner":{"type":["string","null"]},"token_address":{"type":"string"},"unstaking_duration":{"anyOf":[{"$ref":"#/definitions/Duration"},{"type":"null"}]}}},"GetHooksResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"GetHooksResponse","type":"object","required":["hooks"],"properties":{"hooks":{"type":"array","items":{"type":"string"}}}},"StakedBalanceAtHeightResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"StakedBalanceAtHeightResponse","type":"object","required":["balance","height"],"properties":{"balance":{"$ref":"#/definitions/Uint128"},"height":{"type":"integer","format":"uint64","minimum":0}}},"StakedValueResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"StakedValueResponse","type":"object","required":["value"],"properties":{"value":{"$ref":"#/definitions/Uint128"}}},"TokenInfoResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"TokenInfoResponse","type":"object","required":["decimals","name","symbol","total_supply"],"properties":{"decimals":{"type":"integer","format":"uint8","minimum":0},"name":{"type":"string"},"symbol":{"type":"string"},"total_supply":{"$ref":"#/definitions/Uint128"}}},"TotalStakedAtHeightResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"TotalStakedAtHeightResponse","type":"object","required":["height","total"],"properties":{"height":{"type":"integer","format":"uint64","minimum":0},"total":{"$ref":"#/definitions/Uint128"}}},"TotalValueResponse":{"$schema":"http://json-schema.org/draft-07/schema#","title":"TotalValueResponse","type":"object","required":["total"],"properties":{"total":{"$ref":"#/definitions/Uint128"}}}},"definitions":{"AllowanceInfo":{"type":"object","required":["allowance","expires","spender"],"properties":{"allowance":{"$ref":"#/definitions/Uint128"},"expires":{"$ref":"#/definitions/Expiration"},"spender":{"type":"string"}}},"Expiration":{"description":"Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)","oneOf":[{"description":"AtHeight will expire when `env.block.height` >= height","type":"object","required":["at_height"],"properties":{"at_height":{"type":"integer","format":"uint64","minimum":0}},"additionalProperties":false},{"description":"AtTime will expire when `env.block.time` >= time","type":"object","required":["at_time"],"properties":{"at_time":{"$ref":"#/definitions/Timestamp"}},"additionalProperties":false},{"description":"Never will never expire. Used to express the empty variant","type":"object","required":["never"],"properties":{"never":{"type":"object"}},"additionalProperties":false}]},"Timestamp":{"description":"A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```","allOf":[{"$ref":"#/definitions/Uint64"}]},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"},"Uint64":{"description":"A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```","type":"string"},"Claim":{"type":"object","required":["amount","release_at"],"properties":{"amount":{"$ref":"#/definitions/Uint128"},"release_at":{"$ref":"#/definitions/Expiration"}}},"Binary":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"},"Cw20ReceiveMsg":{"description":"Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg","type":"object","required":["amount","msg","sender"],"properties":{"amount":{"$ref":"#/definitions/Uint128"},"msg":{"$ref":"#/definitions/Binary"},"sender":{"type":"string"}}},"Duration":{"description":"Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined","oneOf":[{"type":"object","required":["height"],"properties":{"height":{"type":"integer","format":"uint64","minimum":0}},"additionalProperties":false},{"description":"Time in seconds","type":"object","required":["time"],"properties":{"time":{"type":"integer","format":"uint64","minimum":0}},"additionalProperties":false}]}}}