{"execute":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ExecuteMsg","oneOf":[{"description":"This accepts a properly-encoded ReceiveMsg from a cw20 contract","type":"object","required":["receive"],"properties":{"receive":{"$ref":"#/definitions/Cw20ReceiveMsg"}},"additionalProperties":false},{"description":"This allows us to transfer *exactly one* native token","type":"object","required":["transfer"],"properties":{"transfer":{"$ref":"#/definitions/TransferMsg"}},"additionalProperties":false},{"description":"This must be called by gov_contract, will allow a new cw20 token to be sent","type":"object","required":["allow"],"properties":{"allow":{"$ref":"#/definitions/AllowMsg"}},"additionalProperties":false},{"description":"Change the admin (must be called by current admin)","type":"object","required":["update_admin"],"properties":{"update_admin":{"type":"object","required":["admin"],"properties":{"admin":{"type":"string"}}}},"additionalProperties":false}],"definitions":{"AllowMsg":{"type":"object","required":["contract"],"properties":{"contract":{"type":"string"},"gas_limit":{"type":["integer","null"],"format":"uint64","minimum":0}}},"Binary":{"description":"Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>","type":"string"},"Cw20ReceiveMsg":{"description":"Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg","type":"object","required":["amount","msg","sender"],"properties":{"amount":{"$ref":"#/definitions/Uint128"},"msg":{"$ref":"#/definitions/Binary"},"sender":{"type":"string"}}},"TransferMsg":{"description":"This is the message we accept via Receive","type":"object","required":["channel","remote_address"],"properties":{"channel":{"description":"The local channel to send the packets on","type":"string"},"remote_address":{"description":"The remote address to send to. Don't use HumanAddress as this will likely have a different Bech32 prefix than we use and cannot be validated locally","type":"string"},"timeout":{"description":"How long the packet lives in seconds. If not specified, use default_timeout","type":["integer","null"],"format":"uint64","minimum":0}}},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}},"query":{"$schema":"http://json-schema.org/draft-07/schema#","title":"QueryMsg","oneOf":[{"description":"Return the port ID bound by this contract. Returns PortResponse","type":"object","required":["port"],"properties":{"port":{"type":"object"}},"additionalProperties":false},{"description":"Show all channels we have connected to. Return type is ListChannelsResponse.","type":"object","required":["list_channels"],"properties":{"list_channels":{"type":"object"}},"additionalProperties":false},{"description":"Returns the details of the name channel, error if not created. Return type: ChannelResponse.","type":"object","required":["channel"],"properties":{"channel":{"type":"object","required":["id"],"properties":{"id":{"type":"string"}}}},"additionalProperties":false},{"description":"Show the Config. Returns ConfigResponse (currently including admin as well)","type":"object","required":["config"],"properties":{"config":{"type":"object"}},"additionalProperties":false},{"description":"Return AdminResponse","type":"object","required":["admin"],"properties":{"admin":{"type":"object"}},"additionalProperties":false},{"description":"Query if a given cw20 contract is allowed. Returns AllowedResponse","type":"object","required":["allowed"],"properties":{"allowed":{"type":"object","required":["contract"],"properties":{"contract":{"type":"string"}}}},"additionalProperties":false},{"description":"List all allowed cw20 contracts. Returns ListAllowedResponse","type":"object","required":["list_allowed"],"properties":{"list_allowed":{"type":"object","properties":{"limit":{"type":["integer","null"],"format":"uint32","minimum":0},"start_after":{"type":["string","null"]}}}},"additionalProperties":false}]},"responses":{"ChannelResponse":{"data":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ChannelResponse","type":"object","required":["balances","info","total_sent"],"properties":{"balances":{"description":"How many tokens we currently have pending over this channel","type":"array","items":{"$ref":"#/definitions/Amount"}},"info":{"description":"Information on the channel's connection","allOf":[{"$ref":"#/definitions/ChannelInfo"}]},"total_sent":{"description":"The total number of tokens that have been sent over this channel (even if many have been returned, so balance is low)","type":"array","items":{"$ref":"#/definitions/Amount"}}},"definitions":{"Amount":{"oneOf":[{"type":"object","required":["native"],"properties":{"native":{"$ref":"#/definitions/Coin"}},"additionalProperties":false},{"type":"object","required":["cw20"],"properties":{"cw20":{"$ref":"#/definitions/Cw20Coin"}},"additionalProperties":false}]},"ChannelInfo":{"type":"object","required":["connection_id","counterparty_endpoint","id"],"properties":{"connection_id":{"description":"the connection this exists on (you can use to query client/consensus info)","type":"string"},"counterparty_endpoint":{"description":"the remote channel/port we connect to","allOf":[{"$ref":"#/definitions/IbcEndpoint"}]},"id":{"description":"id of this channel","type":"string"}}},"Coin":{"type":"object","required":["amount","denom"],"properties":{"amount":{"$ref":"#/definitions/Uint128"},"denom":{"type":"string"}}},"Cw20Coin":{"type":"object","required":["address","amount"],"properties":{"address":{"type":"string"},"amount":{"$ref":"#/definitions/Uint128"}}},"IbcEndpoint":{"type":"object","required":["channel_id","port_id"],"properties":{"channel_id":{"type":"string"},"port_id":{"type":"string"}}},"Uint128":{"description":"A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```","type":"string"}}}},"ListChannelsResponse":{"data":{"$schema":"http://json-schema.org/draft-07/schema#","title":"ListChannelsResponse","type":"object","required":["channels"],"properties":{"channels":{"type":"array","items":{"$ref":"#/definitions/ChannelInfo"}}},"definitions":{"ChannelInfo":{"type":"object","required":["connection_id","counterparty_endpoint","id"],"properties":{"connection_id":{"description":"the connection this exists on (you can use to query client/consensus info)","type":"string"},"counterparty_endpoint":{"description":"the remote channel/port we connect to","allOf":[{"$ref":"#/definitions/IbcEndpoint"}]},"id":{"description":"id of this channel","type":"string"}}},"IbcEndpoint":{"type":"object","required":["channel_id","port_id"],"properties":{"channel_id":{"type":"string"},"port_id":{"type":"string"}}}}}},"PortResponse":{"data":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PortResponse","type":"object","required":["port_id"],"properties":{"port_id":{"type":"string"}}}}}}